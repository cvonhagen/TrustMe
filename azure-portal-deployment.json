{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "appName": {
      "type": "string",
      "defaultValue": "trustme",
      "metadata": {
        "description": "Name der Anwendung"
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Azure Region f√ºr Deployment"
      }
    },
    "environment": {
      "type": "string",
      "defaultValue": "prod",
      "metadata": {
        "description": "Environment (dev, staging, prod)"
      }
    },
    "dbAdminUsername": {
      "type": "string",
      "defaultValue": "trustmeadmin",
      "metadata": {
        "description": "Database Administrator Username"
      }
    },
    "dbAdminPassword": {
      "type": "securestring",
      "metadata": {
        "description": "Database Administrator Password"
      }
    },
    "jwtSecretKey": {
      "type": "securestring",
      "metadata": {
        "description": "JWT Secret Key (mindestens 32 Zeichen)"
      }
    }
  },
  "variables": {
    "resourcePrefix": "[concat(parameters('appName'), '-', parameters('environment'))]",
    "containerAppEnvName": "[concat(variables('resourcePrefix'), '-env')]",
    "backendAppName": "[concat(variables('resourcePrefix'), '-backend')]",
    "frontendAppName": "[concat(variables('resourcePrefix'), '-frontend')]",
    "dbServerName": "[concat(variables('resourcePrefix'), '-db')]",
    "dbName": "trustme",
    "keyVaultName": "[concat(variables('resourcePrefix'), '-keyvault')]",
    "containerRegistryName": "[concat(parameters('appName'), 'registry', uniqueString(resourceGroup().id))]"
  },
  "resources": [
    {
      "type": "Microsoft.ContainerRegistry/registries",
      "apiVersion": "2023-01-01-preview",
      "name": "[variables('containerRegistryName')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Basic"
      },
      "properties": {
        "adminUserEnabled": true
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults",
      "apiVersion": "2023-02-01",
      "name": "[variables('keyVaultName')]",
      "location": "[parameters('location')]",
      "properties": {
        "sku": {
          "family": "A",
          "name": "standard"
        },
        "tenantId": "[subscription().tenantId]",
        "accessPolicies": [],
        "enableRbacAuthorization": true
      }
    },
    {
      "type": "Microsoft.DBforPostgreSQL/flexibleServers",
      "apiVersion": "2023-03-01-preview",
      "name": "[variables('dbServerName')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Standard_B1ms",
        "tier": "Burstable"
      },
      "properties": {
        "administratorLogin": "[parameters('dbAdminUsername')]",
        "administratorLoginPassword": "[parameters('dbAdminPassword')]",
        "version": "15",
        "storage": {
          "storageSizeGB": 32
        },
        "backup": {
          "backupRetentionDays": 7,
          "geoRedundantBackup": "Disabled"
        },
        "highAvailability": {
          "mode": "Disabled"
        }
      }
    },
    {
      "type": "Microsoft.DBforPostgreSQL/flexibleServers/databases",
      "apiVersion": "2023-03-01-preview",
      "name": "[concat(variables('dbServerName'), '/', variables('dbName'))]",
      "dependsOn": [
        "[resourceId('Microsoft.DBforPostgreSQL/flexibleServers', variables('dbServerName'))]"
      ],
      "properties": {
        "charset": "UTF8",
        "collation": "en_US.UTF8"
      }
    },
    {
      "type": "Microsoft.DBforPostgreSQL/flexibleServers/firewallRules",
      "apiVersion": "2023-03-01-preview",
      "name": "[concat(variables('dbServerName'), '/AllowAzureServices')]",
      "dependsOn": [
        "[resourceId('Microsoft.DBforPostgreSQL/flexibleServers', variables('dbServerName'))]"
      ],
      "properties": {
        "startIpAddress": "0.0.0.0",
        "endIpAddress": "0.0.0.0"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces",
      "apiVersion": "2022-10-01",
      "name": "[concat(variables('resourcePrefix'), '-logs')]",
      "location": "[parameters('location')]",
      "properties": {
        "sku": {
          "name": "PerGB2018"
        },
        "retentionInDays": 30
      }
    },
    {
      "type": "Microsoft.App/managedEnvironments",
      "apiVersion": "2023-05-01",
      "name": "[variables('containerAppEnvName')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.OperationalInsights/workspaces', concat(variables('resourcePrefix'), '-logs'))]"
      ],
      "properties": {
        "appLogsConfiguration": {
          "destination": "log-analytics",
          "logAnalyticsConfiguration": {
            "customerId": "[reference(resourceId('Microsoft.OperationalInsights/workspaces', concat(variables('resourcePrefix'), '-logs'))).customerId]",
            "sharedKey": "[listKeys(resourceId('Microsoft.OperationalInsights/workspaces', concat(variables('resourcePrefix'), '-logs')), '2022-10-01').primarySharedKey]"
          }
        }
      }
    },
    {
      "type": "Microsoft.App/containerApps",
      "apiVersion": "2023-05-01",
      "name": "[variables('backendAppName')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.App/managedEnvironments', variables('containerAppEnvName'))]",
        "[resourceId('Microsoft.ContainerRegistry/registries', variables('containerRegistryName'))]",
        "[resourceId('Microsoft.DBforPostgreSQL/flexibleServers', variables('dbServerName'))]"
      ],
      "properties": {
        "managedEnvironmentId": "[resourceId('Microsoft.App/managedEnvironments', variables('containerAppEnvName'))]",
        "configuration": {
          "activeRevisionsMode": "Single",
          "ingress": {
            "external": true,
            "targetPort": 8080,
            "allowInsecure": false,
            "traffic": [
              {
                "weight": 100,
                "latestRevision": true
              }
            ]
          },
          "registries": [
            {
              "server": "[reference(resourceId('Microsoft.ContainerRegistry/registries', variables('containerRegistryName'))).loginServer]",
              "username": "[variables('containerRegistryName')]",
              "passwordSecretRef": "registry-password"
            }
          ],
          "secrets": [
            {
              "name": "registry-password",
              "value": "[listCredentials(resourceId('Microsoft.ContainerRegistry/registries', variables('containerRegistryName')), '2023-01-01-preview').passwords[0].value]"
            },
            {
              "name": "database-url",
              "value": "[concat('postgresql://', parameters('dbAdminUsername'), ':', parameters('dbAdminPassword'), '@', reference(resourceId('Microsoft.DBforPostgreSQL/flexibleServers', variables('dbServerName'))).fullyQualifiedDomainName, ':5432/', variables('dbName'), '?sslmode=require')]"
            },
            {
              "name": "jwt-secret",
              "value": "[parameters('jwtSecretKey')]"
            }
          ]
        },
        "template": {
          "containers": [
            {
              "name": "backend",
              "image": "mcr.microsoft.com/azuredocs/containerapps-helloworld:latest",
              "resources": {
                "cpu": 0.5,
                "memory": "1Gi"
              },
              "env": [
                {
                  "name": "PORT",
                  "value": "8080"
                },
                {
                  "name": "DATABASE_URL",
                  "secretRef": "database-url"
                },
                {
                  "name": "JWT_SECRET_KEY",
                  "secretRef": "jwt-secret"
                },
                {
                  "name": "ALLOWED_ORIGINS",
                  "value": "[concat('https://', variables('frontendAppName'), '.', reference(resourceId('Microsoft.App/managedEnvironments', variables('containerAppEnvName'))).defaultDomain)]"
                }
              ]
            }
          ],
          "scale": {
            "minReplicas": 1,
            "maxReplicas": 5,
            "rules": [
              {
                "name": "http-scaling",
                "http": {
                  "metadata": {
                    "concurrentRequests": "100"
                  }
                }
              }
            ]
          }
        }
      }
    },
    {
      "type": "Microsoft.App/containerApps",
      "apiVersion": "2023-05-01",
      "name": "[variables('frontendAppName')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.App/managedEnvironments', variables('containerAppEnvName'))]",
        "[resourceId('Microsoft.ContainerRegistry/registries', variables('containerRegistryName'))]",
        "[resourceId('Microsoft.App/containerApps', variables('backendAppName'))]"
      ],
      "properties": {
        "managedEnvironmentId": "[resourceId('Microsoft.App/managedEnvironments', variables('containerAppEnvName'))]",
        "configuration": {
          "activeRevisionsMode": "Single",
          "ingress": {
            "external": true,
            "targetPort": 80,
            "allowInsecure": false,
            "traffic": [
              {
                "weight": 100,
                "latestRevision": true
              }
            ]
          },
          "registries": [
            {
              "server": "[reference(resourceId('Microsoft.ContainerRegistry/registries', variables('containerRegistryName'))).loginServer]",
              "username": "[variables('containerRegistryName')]",
              "passwordSecretRef": "registry-password"
            }
          ],
          "secrets": [
            {
              "name": "registry-password",
              "value": "[listCredentials(resourceId('Microsoft.ContainerRegistry/registries', variables('containerRegistryName')), '2023-01-01-preview').passwords[0].value]"
            }
          ]
        },
        "template": {
          "containers": [
            {
              "name": "frontend",
              "image": "mcr.microsoft.com/azuredocs/containerapps-helloworld:latest",
              "resources": {
                "cpu": 0.25,
                "memory": "0.5Gi"
              },
              "env": [
                {
                  "name": "VITE_BACKEND_URL",
                  "value": "[concat('https://', reference(resourceId('Microsoft.App/containerApps', variables('backendAppName'))).configuration.ingress.fqdn, '/api/v1')]"
                }
              ]
            }
          ],
          "scale": {
            "minReplicas": 1,
            "maxReplicas": 10,
            "rules": [
              {
                "name": "http-scaling",
                "http": {
                  "metadata": {
                    "concurrentRequests": "50"
                  }
                }
              }
            ]
          }
        }
      }
    }
  ],
  "outputs": {
    "containerRegistryLoginServer": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.ContainerRegistry/registries', variables('containerRegistryName'))).loginServer]"
    },
    "containerRegistryName": {
      "type": "string",
      "value": "[variables('containerRegistryName')]"
    },
    "backendUrl": {
      "type": "string",
      "value": "[concat('https://', reference(resourceId('Microsoft.App/containerApps', variables('backendAppName'))).configuration.ingress.fqdn)]"
    },
    "frontendUrl": {
      "type": "string",
      "value": "[concat('https://', reference(resourceId('Microsoft.App/containerApps', variables('frontendAppName'))).configuration.ingress.fqdn)]"
    },
    "databaseConnectionString": {
      "type": "string",
      "value": "[concat('postgresql://', parameters('dbAdminUsername'), ':', parameters('dbAdminPassword'), '@', reference(resourceId('Microsoft.DBforPostgreSQL/flexibleServers', variables('dbServerName'))).fullyQualifiedDomainName, ':5432/', variables('dbName'), '?sslmode=require')]"
    },
    "backendAppName": {
      "type": "string",
      "value": "[variables('backendAppName')]"
    },
    "frontendAppName": {
      "type": "string",
      "value": "[variables('frontendAppName')]"
    },
    "resourceGroupName": {
      "type": "string",
      "value": "[resourceGroup().name]"
    }
  }
}
